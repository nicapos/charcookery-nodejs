openapi: 3.1.0
info:
  title: CharCookery API
  version: 1.0.0
  description: A REST API backend for CharCookery, an Android project built as a
    course requirement for MOBDEVE.
servers:
  - url: http://localhost:3000/
    description: Local Dev Endpoint
paths:
  /api/:
    get:
      summary: Check API status
      security: []
      responses:
        "200":
          description: API is up and running
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
  /api/token:
    post:
      summary: Sign in with email and password
      tags:
        - auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                username:
                  type: string
                password:
                  type: string
                  minLength: 8
                  example: password
              required:
                - grant_type
                - username
                - password
        required: true
      responses:
        "200":
          description: Successfully signed in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "422":
          $ref: "#/components/responses/ZodErrorResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
  /api/auth/logout:
    post:
      summary: Log out
      tags:
        - auth
      security:
        - OAuth2PasswordBearer: []
      responses:
        "204":
          description: Logged out successfully
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
  /api/user:
    post:
      summary: Create a new user account
      tags:
        - user
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  example: password
              required:
                - email
                - password
        required: true
      responses:
        "201":
          description: User account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "422":
          $ref: "#/components/responses/ZodErrorResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
  /api/recipe: {}
  /api/recipes:
    get:
      summary: Get community recipes
      tags:
        - recipes
      security:
        - OAuth2PasswordBearer: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
components:
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: /api/token
      description: OAuth2 with Password Flow using email as the username
  schemas:
    UserSchema:
      type: object
      properties:
        uid:
          type: string
        email:
          type:
            - string
            - "null"
          format: email
        emailVerified:
          type: boolean
        isAnonymous:
          type: boolean
        providerData:
          type: array
          items:
            type: object
            properties:
              displayName:
                type:
                  - string
                  - "null"
              email:
                type:
                  - string
                  - "null"
                format: email
              phoneNumber:
                type:
                  - string
                  - "null"
              photoURL:
                type:
                  - string
                  - "null"
              providerId:
                type: string
              uid:
                type: string
            required:
              - displayName
              - email
              - phoneNumber
              - photoURL
              - providerId
              - uid
        stsTokenManager:
          $ref: "#/components/schemas/TokensSchema"
        createdAt:
          type: string
        lastLoginAt:
          type: string
        apiKey:
          type: string
        appName:
          type: string
      required:
        - uid
        - email
        - emailVerified
        - isAnonymous
        - providerData
        - stsTokenManager
        - createdAt
        - lastLoginAt
        - apiKey
      example:
        uid: 9PxYKdW3sRfJgHmUnOlQ2xX7iTvAz1cE
        email: name@email.com
        emailVerified: true
        isAnonymous: false
        providerData:
          - providerId: password
            uid: name@email.com
            displayName: null
            email: name@email.com
            phoneNumber: null
            photoURL: null
        stsTokenManager:
          refreshToken: AMf-vBx89o8tBM5Qr_wpr63F-puasdfbVj7paHEtxVXcmvBrszAfJsZg1nkLanwRV9C3LJRO...fqSh
          accessToken: eyJhbGciOiJSUzI1NiIsImtpICZ6ImE2YzYzNTNmMmEzZWNxNjg2NTA1MzBkMTVmNmM0Y2H0...QTXg
          expirationTime: 1700713863736
        createdAt: "1700710263291"
        lastLoginAt: "1700710263291"
        apiKey: pGxbTdQ1uAfiKs2Jyv9HlOoLzVcnDZaYeXhqU7wS
        appName: "[DEFAULT]"
    TokensSchema:
      type: object
      properties:
        refreshToken:
          type: string
        accessToken:
          type: string
        expirationTime:
          type: number
      required:
        - refreshToken
        - accessToken
        - expirationTime
    RecipeSchema:
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        name:
          type: string
        notes:
          type:
            - string
            - "null"
        duration_mins:
          type: number
        cover_image:
          type: string
        instructions:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            type: string
        source_url:
          type:
            - string
            - "null"
      required:
        - id
        - category
        - name
        - notes
        - duration_mins
        - cover_image
        - instructions
        - ingredients
        - source_url
  responses:
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              code:
                type: string
              message:
                type: string
            required:
              - name
              - code
              - message
    UnauthorizedResponse:
      description: Unauthorized. Log in to access this route.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
            required:
              - message
    ZodErrorResponse:
      description: Response query/body validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              issues:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    message:
                      type: string
                    fatal:
                      type: boolean
                    path:
                      type: array
                      items:
                        type: string
                  required:
                    - code
                    - message
            required:
              - name
              - issues
            example:
              name: ZodError
              issues:
                - code: too_small
                  message: String must contain at least 8 character(s)
                  path:
                    - password
    InternalErrorResponse:
      description: Internal server error
