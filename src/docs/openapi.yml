openapi: 3.1.0
info:
  title: CharCookery API
  version: 1.0.0
  description: A REST API backend for CharCookery, an Android project built as a
    course requirement for MOBDEVE.
servers:
  - url: http://localhost:3000/
    description: Local Dev Endpoint
paths:
  /api/:
    get:
      summary: Check API status
      security: []
      responses:
        "200":
          description: API is up and running
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
  /api/upload:
    post:
      summary: Upload recipe image
      tags:
        - media
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                media:
                  type: string
                  format: base64
      responses:
        "200":
          description: API is up and running
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
  /api/token:
    post:
      summary: Sign in
      description: Log-in using email (as username) and password
      tags:
        - auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                username:
                  type: string
                password:
                  type: string
                  minLength: 8
                  example: password
              required:
                - grant_type
                - username
                - password
        required: true
      responses:
        "200":
          description: Successfully signed in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "422":
          $ref: "#/components/responses/ZodErrorResponse"
  /api/auth/verify:
    post:
      summary: Send verification email
      description: Send verification email to the active user's email (requires login)
      tags:
        - auth
      security:
        - OAuth2PasswordBearer: []
      responses:
        "200":
          description: Verification email sent
          content:
            application/json:
              example:
                message: Verification email sent
        "400":
          description: Bad request
          content:
            application/json:
              example:
                message: Account is already verified
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  /api/auth/logout:
    post:
      summary: Log out
      tags:
        - auth
      security:
        - OAuth2PasswordBearer: []
      responses:
        "204":
          description: Logged out successfully
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  /api/user:
    get:
      summary: Get user profile
      description: Get the active user's profile details (requires login)
      tags:
        - user
      security:
        - OAuth2PasswordBearer: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
    post:
      summary: Create account
      tags:
        - user
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  example: password
              required:
                - email
                - password
        required: true
      responses:
        "201":
          description: User account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "422":
          $ref: "#/components/responses/ZodErrorResponse"
    put:
      summary: Update user profile
      description: Update active user's profile details (requires login)
      tags:
        - user
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type:
                    - string
                    - "null"
                photo_url:
                  type:
                    - string
                    - "null"
                dietary_restrictions:
                  type:
                    - string
                    - "null"
              required:
                - name
                - photo_url
                - dietary_restrictions
              example:
                name: John Doe
                photo_url: null
                dietary_restrictions: null
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
    patch:
      summary: Request password change
      tags:
        - user
      description: Lets the active user request for a password change (requires
        login). An email will be sent to their email if successful. The email
        provided in the request must match the active user's email.
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              example:
                message: Password reset link sent to your email.
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
    delete:
      summary: Delete account
      description: Deletes the active user's account (requires login)
      tags:
        - user
      security:
        - OAuth2PasswordBearer: []
      responses:
        "204":
          description: Account deleted successfully
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  /api/recipe:
    post:
      summary: Add recipe
      description: Creates a new user recipe
      tags:
        - recipe
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                name:
                  type: string
                notes:
                  type:
                    - string
                    - "null"
                duration_mins:
                  type: number
                cover_image:
                  type: string
                instructions:
                  type: array
                  items:
                    type: string
                ingredients:
                  type: array
                  items:
                    type: string
                is_favorite:
                  type: boolean
                  default: false
                user_id:
                  type: string
              required:
                - category
                - name
                - notes
                - duration_mins
                - cover_image
                - instructions
                - ingredients
              example:
                category: Pasta Favorites
                name: Spaghetti Bolognese
                notes: Feel free to add extra vegetables for a healthier twist.
                duration_mins: 45
                cover_image: https://example.com/spaghetti-bolognese.jpg
                instructions:
                  - Cook spaghetti according to package instructions.
                  - In a large skillet, heat olive oil over medium heat.
                  - Add minced garlic and diced onions; saut√© until softened.
                  - Add ground beef and cook until browned. Drain excess fat.
                  - Stir in tomato paste, crushed tomatoes, and Italian
                    seasoning.
                  - Simmer for 20-25 minutes, stirring occasionally.
                  - Season with salt and pepper to taste.
                  - Serve the Bolognese sauce over cooked spaghetti.
                  - Garnish with grated Parmesan cheese and fresh basil.
                ingredients:
                  - 1 lb ground beef
                  - 1 onion, diced
                  - 2 cloves garlic, minced
                  - 1 can (28 oz) crushed tomatoes
                  - 2 tablespoons tomato paste
                  - 2 teaspoons Italian seasoning
                  - Salt and pepper to taste
                  - 1 lb spaghetti
                  - Grated Parmesan cheese and fresh basil for garnish
                is_favorite: true
                user_id: bKpgNZcltnSno9O
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRecipeSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  "/api/recipe/{id}":
    get:
      summary: Get recipe
      description: Fetches a recipe given its id
      tags:
        - recipe
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRecipeSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
    patch:
      summary: Update recipe
      description: Updates the favorite status OR notes of a recipe. Recipe can only
        by updated by its owner. Prioritizes updating `favorite_status` over
        `notes`.
      tags:
        - recipe
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_favorite:
                  type: boolean
                notes:
                  type:
                    - string
                    - "null"
              example:
                notes: Feel free to add vegetables for a healthier twist.
                is_favorite: false
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRecipeSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
    delete:
      summary: Delete recipe
      description: Deletes a recipe given its id. Recipe can only by deleted by its owner.
      tags:
        - recipe
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRecipeSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  /api/recipes:
    get:
      summary: Get community recipes
      tags:
        - recipes
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipeSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  "/api/recipes/{userId}":
    get:
      summary: Get user recipes
      description: Fetch all recipes by a user given their user id
      tags:
        - recipes
      security: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: is_favorite
          schema:
            type: boolean
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: max_time
          schema:
            type: number
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRecipeSchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  /category:
    post:
      summary: Add category
      description: Creates a new user category
      tags:
        - category
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
              required:
                - title
              example:
                title: Category A
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategorySchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  "/category/{id}":
    get:
      summary: Get category
      description: Fetches a category given its id
      tags:
        - category
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategorySchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
    delete:
      summary: Delete category
      description: Deletes a category given its id. Category can only by deleted by
        its owner.
      tags:
        - category
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategorySchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  "/categories/{userId}":
    get:
      summary: Get user categories
      description: Fetch all categories by a user given their user id
      tags:
        - categories
      security: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategorySchema"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
components:
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: /api/token
      description: OAuth2 with Password Flow using email as the username
  schemas:
    UserSchema:
      type: object
      properties:
        uid:
          type: string
        email:
          type:
            - string
            - "null"
          format: email
        emailVerified:
          type: boolean
        isAnonymous:
          type: boolean
        providerData:
          type: array
          items:
            type: object
            properties:
              displayName:
                type:
                  - string
                  - "null"
              email:
                type:
                  - string
                  - "null"
                format: email
              phoneNumber:
                type:
                  - string
                  - "null"
              photoURL:
                type:
                  - string
                  - "null"
              providerId:
                type: string
              uid:
                type: string
            required:
              - displayName
              - email
              - phoneNumber
              - photoURL
              - providerId
              - uid
        stsTokenManager:
          type: object
          properties:
            refreshToken:
              type: string
            accessToken:
              type: string
            expirationTime:
              type: number
          required:
            - refreshToken
            - accessToken
            - expirationTime
        createdAt:
          type: string
        lastLoginAt:
          type: string
        apiKey:
          type: string
        appName:
          type: string
      required:
        - uid
        - email
        - emailVerified
        - isAnonymous
        - providerData
        - stsTokenManager
        - createdAt
        - lastLoginAt
        - apiKey
      example:
        uid: 9PxYKdW3sRfJgHmUnOlQ2xX7iTvAz1cE
        email: name@email.com
        emailVerified: true
        isAnonymous: false
        providerData:
          - providerId: password
            uid: name@email.com
            displayName: null
            email: name@email.com
            phoneNumber: null
            photoURL: null
        stsTokenManager:
          refreshToken: AMf-vBx89o8tBM5Qr_wpr63F-puasdfbVj7paHEtxVXcmvBrszAfJsZg1nkLanwRV9C3LJRO...fqSh
          accessToken: eyJhbGciOiJSUzI1NiIsImtpICZ6ImE2YzYzNTNmMmEzZWNxNjg2NTA1MzBkMTVmNmM0Y2H0...QTXg
          expirationTime: 1700713863736
        createdAt: "1700710263291"
        lastLoginAt: "1700710263291"
        apiKey: pGxbTdQ1uAfiKs2Jyv9HlOoLzVcnDZaYeXhqU7wS
        appName: "[DEFAULT]"
    AccountSchema:
      type: object
      properties:
        name:
          type:
            - string
            - "null"
        email:
          type:
            - string
            - "null"
          format: email
        photo_url:
          type:
            - string
            - "null"
        dietary_restrictions:
          type:
            - string
            - "null"
      required:
        - name
        - email
        - photo_url
        - dietary_restrictions
      example:
        name: John Doe
        email: name@example.com
        photo_url: null
        dietary_restrictions: Soy-free, Egg-free, low carb
    RecipeSchema:
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        name:
          type: string
        notes:
          type:
            - string
            - "null"
        duration_mins:
          type: number
        cover_image:
          type: string
        instructions:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            type: string
        source_url:
          type:
            - string
            - "null"
      required:
        - category
        - name
        - notes
        - duration_mins
        - cover_image
        - instructions
        - ingredients
        - source_url
      example:
        id: 5Xc9WPnb2DfyhZA
        category: Dessert
        name: Chocolate Chip Cookies
        notes: null
        duration_mins: 30
        cover_image: https://example.com/chocolate-chip-cookies.jpg
        instructions:
          - Preheat the oven to 350¬∞F (175¬∞C).
          - In a large mixing bowl, cream together butter, sugar, and brown
            sugar until smooth.
          - Beat in eggs, one at a time, then stir in vanilla extract.
          - In a separate bowl, combine flour, baking soda, and salt. Gradually
            add the dry ingredients to the wet ingredients.
          - Fold in chocolate chips.
          - Drop rounded tablespoons of dough onto ungreased baking sheets.
          - Bake for 10-12 minutes or until the edges are golden brown.
          - Allow cookies to cool on the baking sheet for a few minutes before
            transferring to a wire rack to cool completely.
        ingredients:
          - 1 cup butter, softened
          - 1 cup white sugar
          - 1 cup packed brown sugar
          - 2 eggs
          - 1 teaspoon vanilla extract
          - 3 cups all-purpose flour
          - 1 teaspoon baking soda
          - 1/2 teaspoon salt
          - 2 cups semisweet chocolate chips
        source_url: https://example.com/chocolate-chip-cookies-recipe
    UserRecipeSchema:
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        name:
          type: string
        notes:
          type:
            - string
            - "null"
        duration_mins:
          type: number
        cover_image:
          type: string
        instructions:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            type: string
        is_favorite:
          type: boolean
          default: false
        user_id:
          type: string
      required:
        - category
        - name
        - notes
        - duration_mins
        - cover_image
        - instructions
        - ingredients
        - is_favorite
      example:
        id: 4Ky48xur4eI700E
        category: Pasta Favorites
        name: Spaghetti Bolognese
        notes: Feel free to add extra vegetables for a healthier twist.
        duration_mins: 45
        cover_image: https://example.com/spaghetti-bolognese.jpg
        instructions:
          - Cook spaghetti according to package instructions.
          - In a large skillet, heat olive oil over medium heat.
          - Add minced garlic and diced onions; saut√© until softened.
          - Add ground beef and cook until browned. Drain excess fat.
          - Stir in tomato paste, crushed tomatoes, and Italian seasoning.
          - Simmer for 20-25 minutes, stirring occasionally.
          - Season with salt and pepper to taste.
          - Serve the Bolognese sauce over cooked spaghetti.
          - Garnish with grated Parmesan cheese and fresh basil.
        ingredients:
          - 1 lb ground beef
          - 1 onion, diced
          - 2 cloves garlic, minced
          - 1 can (28 oz) crushed tomatoes
          - 2 tablespoons tomato paste
          - 2 teaspoons Italian seasoning
          - Salt and pepper to taste
          - 1 lb spaghetti
          - Grated Parmesan cheese and fresh basil for garnish
        is_favorite: true
        user_id: bKpgNZcltnSno9O
    CategorySchema:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          minLength: 4
        user_id:
          type: string
      required:
        - title
        - user_id
      example:
        id: pONJ4ETD5iu3sQE
        title: Category A
        user_id: 9PxYKdW3sRfJgHmUnOlQ2xX7iTvAz1cE
  responses:
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              code:
                type: string
              message:
                type: string
            required:
              - name
              - code
              - message
    UnauthorizedResponse:
      description: Unauthorized. Log in to access this route.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
            required:
              - message
    ZodErrorResponse:
      description: Response query/body validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              issues:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    message:
                      type: string
                    fatal:
                      type: boolean
                    path:
                      type: array
                      items:
                        type: string
                  required:
                    - code
                    - message
            required:
              - name
              - issues
            example:
              name: ZodError
              issues:
                - code: too_small
                  message: String must contain at least 8 character(s)
                  path:
                    - password
    InternalErrorResponse:
      description: Internal server error
